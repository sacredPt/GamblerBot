from io import StringIO
import logging
import sys

import requests
from config import *
from db import DB, cursor, conn
import api
from datetime import datetime
import asyncio

from pydantic import BaseModel
from log import create_logger


async def send_request_to_admin(msg: types.Message, forum_url: str, exp: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ ADMIN_ID (—É–∫–∞–∑—ã–≤–∞–µ—Ç—å—Å—è –≤ config.ini)
    """
    
    
    btns = [
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"user_request_decline?{msg.from_user.id}"), 
         types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"user_request_accept?{msg.from_user.id}")]
    ]
    text = f'''
‚õÑÔ∏è–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É!
‚îúüë§–Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{msg.from_user.username}
‚îúüÜîID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{msg.from_user.id}</code>
‚îúüí≠–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: <code>{exp}</code>
‚îîüí≠–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä—É–º(lolz.live): <code>{forum_url}</code>
'''

    await bot.send_message(
        chat_id=CHANNEL_ID,
        text=text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns),
        parse_mode='HTML'
    )


async def show_user_profile(call: types.CallbackQuery = None, msg: types.Message = None, msg2edit: types.Message = None):
    if call is not None:
        user_id = call.from_user.id
    elif msg is not None:
        user_id = msg.from_user.id

    btc_wallet, usdt_wallet = DB.get(user_id=user_id, data="btc_wallet", table=DB.users_table), DB.get(user_id=user_id, data="usdt_wallet", table=DB.users_table)
    if btc_wallet is None:
        btc_wallet = "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    if usdt_wallet is None:
        usdt_wallet = "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    text = f"""
<b>‚òÉÔ∏è –ü—Ä–æ—Ñ–∏–ª—å
‚îúüÜî–í–∞—à ID: <code>{user_id}</code>
‚îúü¶ã–í–∞—à –Ω–∏–∫–Ω–µ–π–º: <code>{DB.get(user_id=user_id, data="username", table=DB.users_table)}</code>
‚îúüí∏–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{DB.get(user_id=user_id, data="balance", table=DB.users_table)}$</code>
‚îúüí≤–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤: <code>{DB.get(user_id=user_id, data="percentage", table=DB.users_table)}%</code>
‚îúüëõ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:
    ‚îî BTC: <code>{btc_wallet}</code>
    ‚îî USDT TRC-20: <code>{usdt_wallet}</code>

üßä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚îúüíé–û–±–æ—Ä–æ—Ç: <code>{DB.get(user_id=user_id, data="cash_circulation", table=DB.users_table)}$</code></b>
"""

    profile_btns = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="ü¶ã –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫", callback_data="change_username"), types.InlineKeyboardButton(text="üëõ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="link_wallet")],
        [types.InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="payout")],
        [types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_main")]
    ])
    await msg.answer(
        text=text,
        reply_markup=profile_btns,
        parse_mode='HTML'
    )

    


async def send_payout_to_admin(user_id: int, amount_of_payout: float, wallet_name: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –∞–¥–º–∏–Ω—É –ø–æ CHANNEL_ID (—É–∫–∞–∑—ã–≤–∞–µ—Ç—å—Å—è –≤ config.ini)
    """
    
    user_firstname = DB.get(user_id=user_id, data="tg_firstname", table=DB.users_table)
    user_name = DB.get(user_id=user_id, data="tg_username", table=DB.users_table)
    wallet = DB.get(user_id=user_id, data=f"{wallet_name.lower()}_wallet", table=DB.users_table)
    text = f"""
üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É
üÜî {user_firstname} / {user_id} / @{user_name}
‚ö° –°—É–º–º–∞: {amount_of_payout} $ 
üí≥ –ö–æ—à–µ–ª–µ–∫:
‚îî {wallet_name}: {wallet}
            """
    
    send_payout_btns = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"payout_request_decline?{user_id}"), 
         types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ", callback_data=f"payout_request_accept?{user_id}")]
    ])


    await bot.send_message(
        chat_id=USERS_PAYOUTS,
        text=text,
        reply_markup=send_payout_btns,
        parse_mode="HTML"
    )

async def update_user_balance(user_id: int, amount_of_payout: float, msg2edit: types.Message, wallet_name: str):
    """
    –•–∑, –∑–∞—á–µ–º —è –≤—ã–≤–µ–ª –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–∞–ª–∏–∫ –∏ —Å–ø–∏—Å—ã–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥ —Å –±–∞–ª–∏–∫–∞
    """
    
    
    balance = float(DB.get(user_id=user_id, data="balance", table=DB.users_table))
    if balance == 0:
        await msg2edit.edit_text(
            text="‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é"
        )
        return
    elif amount_of_payout > balance:
        await msg2edit.edit_text(
            text="‚ùå –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –±–æ–ª—å—à–µ, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å"
        )
        return
    
    else:
        new_balance = balance - amount_of_payout
        DB.update(user_id=user_id, column="balance", new_data=new_balance, table=DB.users_table)
        await msg2edit.edit_text(
            text="‚úÖÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è"
        )
        await send_payout_to_admin(user_id=user_id, amount_of_payout=amount_of_payout, wallet_name=wallet_name)



async def create_btns(
    btns_type: str,
    data_list: list,
    callback_data_main_btns: str,
    callback_data_nav_btns: str,
    back_callback: str,
    page: int = 0,
    main_btns_prefix: str = None,
    ids: list = None,
    
):
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–º–∏–∫–∞–º–∏.

    btns_type = "stats", "delete", "edit" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–º–∏–∫–æ–≤
    """
    buttons_per_page = 4
    inline_keyboard = []
    start_idx = page * buttons_per_page
    end_idx = start_idx + buttons_per_page
    promo_page = data_list[start_idx:end_idx]
    total_pages = (len(data_list) + buttons_per_page - 1) // buttons_per_page

    if -1 < page < total_pages:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(promo_page), 2):
            row_buttons = []
            for j, code in enumerate(promo_page[i:i + 2]):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ data_list
                idx_in_data_list = start_idx + i + j
                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º btns_type –∏–∑ ids, –µ—Å–ª–∏ –æ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                current_btns_type = ids[idx_in_data_list] if ids and idx_in_data_list < len(ids) else btns_type
                row_buttons.append(types.InlineKeyboardButton(
                    text=main_btns_prefix + str(code),
                    callback_data=f"{callback_data_main_btns}{code}?{current_btns_type}"
                ))
            inline_keyboard.append(row_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        navigation_buttons = [
            types.InlineKeyboardButton(text="<", callback_data=f"{callback_data_nav_btns}{page - 1}?{btns_type}"),
            types.InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="pass"),
            types.InlineKeyboardButton(text=">", callback_data=f"{callback_data_nav_btns}{page + 1}?{btns_type}")
        ]
        inline_keyboard.append(navigation_buttons)
        inline_keyboard.append([types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data=back_callback)])
        # –°–æ–∑–¥–∞–µ–º InlineKeyboardMarkup —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º inline_keyboard
        return types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    else:
        return False


async def create_promo_btns(user_id: int, btns_type: str, page: int = 0):
    
    promo_codes = DB.get_all_user_id(
        user_id=user_id,
        data="name",
        table=DB.promocodes
    )
    return await create_btns(btns_type=btns_type, 
                             page=page, 
                             data_list=promo_codes, 
                             callback_data_main_btns="promocode_", 
                             callback_data_nav_btns="promo_page_",
                             main_btns_prefix="",
                             back_callback="materials"
                             )


async def create_workers_btns(data_list: list, page: int = 0):
    return await create_btns(btns_type=None, 
                             page=page, 
                             data_list=data_list, 
                             callback_data_main_btns="worker_", 
                             callback_data_nav_btns="workers_page_", 
                             main_btns_prefix="üë•",
                             back_callback="back_admin"
                             )

async def create_deposits_btns(data_list: list, ids: list, page: int = 0):
    return await create_btns(btns_type=None, 
                             page=page, 
                             data_list=data_list, 
                             callback_data_main_btns="deposit_", 
                             callback_data_nav_btns="deposits_page_", 
                             main_btns_prefix="üí∞",
                             ids=ids,
                             back_callback="back_admin"
                             )    

async def promo_view_stats(promo_name: str):
    api_result = await api.get_promo(promo_name)
    promo_data = api_result["data"]
    api_result_stats = await api.get_promo_stats(promo_name)
    countries = api_result_stats["data"]['countries']
    text = f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É - </b><code>{promo_data['name']}</code>
<blockquote><b>‚îúüí∞–°—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promo_data['amount']}$
‚îúüéÅ–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {promo_data['activations']}
‚îúüí∏–î–µ–ø–æ–∑–∏—Ç–æ–≤: {promo_data['deposits']}$
‚îúüé∞–û—Ç—ã–≥—Ä—ã—à: {'–í–∫–ª—é—á–µ–Ω' if promo_data['shouldWager'] is True else '–û—Ç–∫–ª—é—á–µ–Ω'}
</b></blockquote><b>
üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (–°—Ç—Ä–∞–Ω–∞/–ê–∫—Ç–∏–≤–∞—Ü–∏–π/–î–µ–ø–æ–∑–∏—Ç–æ–≤/
–ö–æ–Ω–≤–µ—Ä—Å–∏—è):</b>
"""    

    text+='<blockquote>'
    for country in countries:
        name = country_code_to_flag(country['name'])
        activations = country['activations']
        amount = country['amount']
        conversion = country['conversion']
        text += (f"<b>{name} {activations} / {amount}$ / {round(conversion, 2)}$</b>\n")
    text += '</blockquote>'
    return text


def country_code_to_flag(country_code):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ –±–µ—Ä–µ–º –¥–≤–∞ –ø–µ—Ä–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
    code_points = [ord(char) - 0x41 + 0x1F1E6 for char in country_code.upper()]
    return chr(code_points[0]) + chr(code_points[1])


async def send_newDeposit(data: dict):
    today = datetime.now()

    cursor.execute(f"SELECT user_id FROM promocodes WHERE name = ?", (data['mammothPromo'], ))
    worker_id = cursor.fetchone()[0] #–ü–æ–ª—É—á–∏–ª user_id –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
    
    worker_username = DB.get(user_id=worker_id, data="username", table=DB.users_table) #Username –≤–æ—Ä–∫–µ—Ä–∞ –ø–æ–ª—É—á–∏–ª
    worker_perc = DB.get(user_id=worker_id, data="percentage", table=DB.users_table) #–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞ –ø–æ–ª—É—á–∏–ª
    
    cursor.execute(f"SELECT activation_count FROM promocodes WHERE name = ?", (data['mammothPromo'], ))
    old_promo_activations = cursor.fetchone()[0] # –ü–æ–ª—É—á–∏–ª –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É activation_count
    
    cursor.execute(f"SELECT deposit FROM promocodes WHERE name = ?", (data['mammothPromo'], ))
    old_promo_deposits = cursor.fetchone()[0] # —Ö—É–π –ø–æ–π–º–∏ —á–µ —ç—Ç–æ –Ω—É –Ω–∞–≤–µ—Ä–Ω–æ–µ —Å—Ç–∞—Ä–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–≤ –Ω–∞ –ø—Ä–æ–º–∏–∫–µ
    
    old_worker_balance = DB.get(user_id=worker_id, data="balance", table=DB.users_table)
    old_worker_all_time_balance = DB.get(user_id=worker_id, data="all_time_balance", table=DB.users_table)
    old_bot_all_time_balance = DB.get_without_user_id(data="all_time_balance", table=DB.bot_info)
    old_bot_all_promo_activations = DB.get_without_user_id(data="promo_activations", table=DB.bot_info)
    old_bot_deposits = DB.get_without_user_id(data="deposits", table=DB.bot_info)
    
    # –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    new_bot_all_promo_activations = int(old_bot_all_promo_activations) + 1
    new_promo_activations = int(old_promo_activations) + 1
    new_promo_deposits = float(old_promo_deposits) + float(data['amountUsd'])
    new_worker_balance = float(old_worker_balance + (float(data['amountUsd'] * worker_perc) / 100))
    new_worker_all_time_balance = float(old_worker_all_time_balance) + (float(data['amountUsd'] * worker_perc) / 100)
    new_bot_all_time_balance = float(old_bot_all_time_balance) + float(data['amountUsd'])
    new_bot_deposits = int(old_bot_deposits) + 1

    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
    new_worker_balance = round(new_worker_balance, 2)
    new_promo_deposits = round(new_promo_deposits, 2)
    new_worker_all_time_balance = round(new_worker_all_time_balance, 2)
    new_bot_all_time_balance = round(new_bot_all_time_balance, 2)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    DB.update(user_id=worker_id, column="balance", new_data=new_worker_balance, table=DB.users_table)
    DB.update(user_id=worker_id, column="all_time_balance", new_data=new_worker_all_time_balance, table=DB.users_table)
    
    DB.update_without_user_id(column="all_time_balance", new_data=new_bot_all_time_balance, table=DB.bot_info)
    DB.update_without_user_id(column="promo_activations", new_data=new_bot_all_promo_activations, table=DB.bot_info)
    DB.update_without_user_id(column="deposits", new_data=new_bot_deposits, table=DB.bot_info)
    
    
    cursor.execute(f"UPDATE promocodes SET activation_count = ? WHERE name = ?", (new_promo_activations, data['mammothPromo']))
    cursor.execute(f"UPDATE promocodes SET deposit = ? WHERE name = ?", (new_promo_deposits, data['mammothPromo']))
    conn.commit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ø–æ–∑–∏—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
    cursor.execute(
            'INSERT INTO deposits (worker_id, amount, mamonth_login, token, domain, date, hash, country, amountUSD)'
            'VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
            (worker_id, float(data['amount']), str(data["mammothLogin"]), str(data["token"]), str(data["domain"]), today, str(data["txHash"]), str(data["mammothCountry"]), str(data["amountUsd"])))

    conn.commit()

    message_to_channel = f"""
<b>üî• –•–æ-—Ö–æ-—Ö–æ! –ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!
‚îúü¶ã–ù–∏–∫–Ω–µ–π–º –≤–æ—Ä–∫–µ—Ä–∞: <code>{worker_username if worker_username else '*****'}</code>
‚îî‚ùÑÔ∏è–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: <code>{data['amountUsd']} $</code></b>
        """
    
    await bot.send_message(
        chat_id=GROUP_ID,
        text=message_to_channel,
        parse_mode='HTML'
    )
    
    message_to_user = f'''
<b>üî• –•–æ-—Ö–æ-—Ö–æ! –í–∞–º –ø—Ä–∏—à–µ–ª –¥–µ–ø–æ–∑–∏—Ç!
‚îú‚ùÑÔ∏è–°—É–º–º–∞: <code>{data['amountUsd']}$</code>
‚îú‚ùÑÔ∏è–ü–æ—á—Ç–∞ –º–∞–º–æ–Ω—Ç–∞: <code>{data['mammothLogin']}$</code>
‚îú‚ùÑÔ∏è–°—Ç—Ä–∞–Ω–∞: <code>{data['mammothCountry']}$</code>
‚îîüîê–î–æ–º–µ–Ω: <code>{data['domain']}</code></b>
'''
    await bot.send_message(
        chat_id=worker_id,
        text=message_to_user,
        parse_mode='HTML'
    )
    
def create_top_list():
    users_list = []
    users = DB.get_all(data="user_id", table=DB.users_table)
    text = '''
ü•á –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤

'''
    for i, user_id in enumerate(users, start=1):
        worker_username = DB.get(user_id=user_id, data="tg_username", table=DB.users_table)
        worker_firstname = DB.get(user_id=user_id, data="tg_firstname", table=DB.users_table)
        worker_balance = DB.get(user_id=user_id, data="all_time_balance", table=DB.users_table)
        users_list.append([user_id, worker_balance, worker_firstname, worker_username])

    users_list.sort(key=lambda x: x[1], reverse=True)
    
    for i, user in enumerate(users_list, start=1):
        if i == 11: break
            
        if i == 1:
            text += f"ü•á‚Äç –í–æ—Ä–∫–µ—Ä: {user[2]} (@{user[3]}) / id{user[0]}\n–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user[1]}$\n\n"
        elif i == 2:
            text += f"ü•à‚Äç –í–æ—Ä–∫–µ—Ä: {user[2]} (@{user[3]}) / id{user[0]}\n–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user[1]}$\n\n"
        elif i == 3:
            text += f"ü•â –í–æ—Ä–∫–µ—Ä: {user[2]} (@{user[3]}) / id{user[0]}\n–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user[1]}$\n\n"
        else:
            text += f"üë® –í–æ—Ä–∫–µ—Ä: {user[2]} (@{user[3]}) / id{user[0]}\n–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user[1]}$\n\n"
    
    
    return text


async def create_worker_profile(worker_id: int):
    worker_name = DB.get(user_id=worker_id, data="tg_firstname", table=DB.users_table)
    worker_username = DB.get(user_id=worker_id, data="tg_username", table=DB.users_table)
    text = f"üë• –í–æ—Ä–∫–µ—Ä {worker_id} ({worker_name}/@{worker_username})"
    worker_btns = [
        [types.InlineKeyboardButton(text="‚õèÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å // –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"ban/unban_{worker_id}")],
        [types.InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"changeBalance_{worker_id}")],
        [types.InlineKeyboardButton(text="ü§ù –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç", callback_data=f"show_percentage_{worker_id}"), types.InlineKeyboardButton(text="üí≥  –ö–æ—à–µ–ª—å–∫–∏", callback_data=f"show_wallets_{worker_id}")],
        [types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data=f"workers_page_0?None")]
    ]
    return text, worker_btns



class OutputInterceptor(list):
    def __enter__(self):
        self._stdout = sys.stdout
        sys.stdout = self._stringio = StringIO()
        return self

    def __exit__(self, *args):
        self.extend(self._stringio.getvalue().splitlines())
        del self._stringio
        sys.stdout = self._stdout


async def read_subprocess_output(stream):
    while True:
        try:
            line = await stream.readline()
            if not line:
                break
            logger = create_logger("socket_handler")
            logger.log(level=logging.INFO, msg=f'{line.decode().strip()}')
        except Exception:
            continue