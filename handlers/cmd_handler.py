from config import *
from db import DB
from log import create_logger
logger = create_logger(__name__)


@dp.message(CommandStart())
async def start(msg: types.Message, state: FSMContext, user_id: int = None, edit_msg: bool = False):
    if not user_id:
        user_id = msg.from_user.id
    await state.clear()
    user_state = DB.get(user_id=user_id, data="state", table=DB.unconfirmed_users_table)
    _is_banned = DB.get(user_id=user_id, data="_is_banned", table=DB.users_table) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
    if user_state == None:
        text='''
‚òÉÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É <b>Elysium!</b>
üí≠ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É - –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤!
‚ú® –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

'''
        btns = [
            [types.InlineKeyboardButton(text="üí≠ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"send_req_zz")]
        ]
        
        await msg.answer(
            text, 
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns),
            parse_mode='HTML'
        )
        #await state.set_state(States.start_input)
    
    elif user_state == "wait":
        await msg.answer("üßê –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ")
        
    elif user_state == "confirmed":
        if _is_banned == "False":
            _is_user_in_main_db = DB.get(user_id=user_id, data="user_id", table=DB.users_table) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
            if _is_user_in_main_db is not None:
                start_btns = types.ReplyKeyboardMarkup(keyboard=[
                    [types.KeyboardButton(text="‚òÉÔ∏è –ü—Ä–æ—Ñ–∏–ª—å"), types.KeyboardButton(text="üåè –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã")],
                    [types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), types.KeyboardButton(text="üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
                ], resize_keyboard=True)
                if edit_msg is True:
                    await msg.delete()
                    await msg.answer(
                        text="‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                        reply_markup=start_btns
                    )
                    
                    
                else:
                    await msg.answer(
                        text="‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        reply_markup=start_btns
                    )
        else:
            await msg.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
    elif user_state == "unconfirmed":
        await msg.answer(f"‚ùå –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π - {config['admin_username']}")



@dp.message(Command("admin"))
async def admin(msg: types.Message, state: FSMContext, user_id: int = None, edit_msg: bool = False):
    await state.clear()
    if not user_id: user_id = msg.from_user.id
    if str(user_id) in ADMIN_IDS:
        admin_btns = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üë• –í–æ—Ä–∫–µ—Ä—ã", callback_data="admin_workers"), types.InlineKeyboardButton(text="ü•á –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤", callback_data="admin_topWorkers")],
            [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"), types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_msg")],
            [types.InlineKeyboardButton(text="üí∞ –î–µ–ø–æ–∑–∏—Ç—ã", callback_data="admin_deposits"), types.InlineKeyboardButton(text="üåè –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã", callback_data="admin_url")],
            [types.InlineKeyboardButton(text="üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="admin_info"), types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")],
        ])
        text = '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        if edit_msg is True:
            await msg.edit_text(
                text=text, 
                reply_markup=admin_btns
            )
        else:
            await msg.answer(
                text=text, 
                reply_markup=admin_btns
            )
    else:
        pass



@dp.message(Command("user"))
async def user(msg: types.Message, state: FSMContext):
    if str(msg.from_user.id) in ADMIN_IDS:
        await state.clear()
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ id –∏–ª–∏ —Ç–µ–≥")
        await state.set_state(States.user_input)