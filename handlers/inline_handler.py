from datetime import datetime
import time
from config import *
import utils
from db import DB, cursor, conn
import api
import handlers.cmd_handler as cmd_handler
from log import create_logger
logger = create_logger(__name__)
import main
import json
from aiogram.types import MessageEntity
from aiogram import types

@dp.callback_query(F.data == F.data)
async def inline_handler(call: types.CallbackQuery, state: FSMContext):
    """
    –ï–¥–∏–Ω—ã–π handler inline –∫–Ω–æ–ø–æ–∫
    """
    logger.info(f"Received inline callback \"{str(call.data)}\" from @{call.from_user.username}")
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î username –∏ firstname —é–∑–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    DB.update(user_id=call.from_user.id, column="tg_firstname", new_data=call.from_user.first_name, table=DB.users_table)
    DB.update(user_id=call.from_user.id, column="tg_username", new_data=call.from_user.username, table=DB.users_table)
    _is_banned = DB.get(user_id=call.from_user.id, data="_is_banned", table=DB.users_table)
    if str(call.from_user.id) in ADMIN_IDS or _is_banned == "False":
        if "user_request_" in str(call.data):
            admin_solution = str(call.data).split("_")[2].split("?")[0]
            target_user_id = str(call.data).split("?")[1]
            target_username = DB.get(user_id=target_user_id, data='tg_username', table=DB.unconfirmed_users_table)
            user = DB.get(user_id=target_user_id, data="user_id", table=DB.users_table)
            print(user)
            if not user:
                if admin_solution == 'accept':
                    DB.update(user_id=target_user_id, column="state", new_data="confirmed", table=DB.unconfirmed_users_table)
                    DB.insert(user_id=target_user_id, tg_username=target_username, tg_firstname="None")
                    await call.message.edit_reply_markup(reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–∞!", callback_data="pass")]]))
                    text='''
‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ <b>–æ–¥–æ–±—Ä–µ–Ω–∞!</b>
‚å®Ô∏è –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ.

‚ùÑÔ∏è –ü—Ä–∏—è—Ç–Ω–æ–π –≤–∞–º —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ <b>Elysium</b>!
'''
                    msg = await bot.send_message(
                        text="‚úÖ –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞, —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã! –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å –º–µ–Ω—é –±–æ—Ç–∞ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start",
                        chat_id=target_user_id,
                    )
                    await cmd_handler.start(msg=msg, state=state, user_id=target_user_id)

                elif admin_solution == "decline":
                    DB.update(user_id=target_user_id, column="state", new_data="unconfirmed", table=DB.unconfirmed_users_table)
                    await call.message.edit_reply_markup(reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞!", callback_data="pass")]]))
                    await bot.send_message(
                        text=f"‚ùå –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π - {config['admin_username']}",
                        chat_id=target_user_id
                    )
            else:
                btns = [[
                    types.InlineKeyboardButton(text="–ó–∞—è–≤–∫–∞ —É–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞", callback_data="pass")
                ]]
                await call.message.edit_reply_markup(
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns)
                )
        # elif call.data == "user_profile":
        #     await utils.show_user_profile(call)
        
        elif call.data == "change_username":
            await call.message.edit_text(
                text="‚≠êÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Ç—Å—Ç—É–∫–µ:",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[]])
            )
            await state.set_state(States.change_username)
        
        elif call.data == "link_wallet":
            link_wallet_btns = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="BTC", callback_data="link_wallet_BTC"), types.InlineKeyboardButton(text="USDT", callback_data="link_wallet_USDT")],
                [types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="user_profile")]
            ])
            await call.message.edit_text(
                text="üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –∫–æ—à–µ–ª–µ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å",
                reply_markup=link_wallet_btns
            )
        
        elif call.data == "promo_setts":
            
            promocodes = DB.get_all_user_id(
                user_id=call.from_user.id,
                data="name",
                table=DB.promocodes
            )
            inline_keyboard = []
            for code in promocodes:
                inline_keyboard.append(
                    [
                        types.InlineKeyboardButton(text=str(code), callback_data=f"statspromo_{code}")
                    ]
                )
            
            inline_keyboard.append(
                    [
                        types.InlineKeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data=f"create_promo")
                    ] 
                )
            inline_keyboard.append(
                    [
                        types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_main")
                    ]  
                )
            
            
            try:
                await call.message.edit_text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
            except:
                a=2
            await call.message.edit_reply_markup(reply_markup=types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard))
        
        elif call.data.startswith('statspromo_'):
            
            promocode = call.data.split('_')[1]
            promo_view_text = await utils.promo_view_stats(promocode)
            
            inline_keyboard = [
                [
                    types.InlineKeyboardButton(text="‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"updatepromostats_{promocode}"),
                    types.InlineKeyboardButton(text="‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"editpromo_{promocode}"),
                    types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"deletecode_{promocode}")
                    
                ],
                [
                    types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="promo_setts")
                ]
            ]
            
            await call.message.edit_text(
                text=promo_view_text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard),
                parse_mode='HTML'
            )
        
        elif call.data.startswith('updatepromostats_'):
            promocode = call.data.split('_')[1]
            try:
                promo_view_text = await utils.promo_view_stats(promocode)
                inline_keyboard = [
                    [
                        types.InlineKeyboardButton(text="‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"updatepromostats_{promocode}"),
                        types.InlineKeyboardButton(text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"editpromo_{promocode}"),
                        types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"deletecode_{promocode}")
                    ],
                    [
                        types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="promo_setts")
                    ]
                ]
                
                await call.message.edit_text(
                    text=promo_view_text,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard),
                    parse_mode='HTML'
                )
            except:
                 await call.answer("üî¥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!", show_alert=True)
        
        elif call.data.startswith('deletecode_'):
            promocode = call.data.split('_')[1]
            text = f'‚ÅâÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ {promocode}?'
            btns = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"promocodeDelete_decline?{promocode}"), types.InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"promocodeDelete_accept?{promocode}")]
            ])
            await call.message.edit_text(
                text=text,
                reply_markup=btns
            )
        
        elif call.data.startswith('editpromo_'):
            promocode = call.data.split('_')[1]
            btns = types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="üí∞ –°—É–º–º–∞", callback_data=f"promocodeEdit_amount?{promocode}"),
                        types.InlineKeyboardButton(text="üé∞ –û—Ç—ã–≥—Ä—ã—à", callback_data=f"promocodeEdit_ubt?{promocode}")
                    ],
                    [
                        types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data=f"statspromo_{promocode}")
                    ]
                    
                ])
            cursor.execute(f"SELECT amount, ubt FROM promocodes WHERE name = ?", (promocode, ))
            result = cursor.fetchall()[0]
            promo_amount = result[0]
            promo_ubt = result[1]
            text = f'''<b>
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É "<code>{promocode}</code>":
‚îúüí∞–°—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: <code>{promo_amount}</code>$
‚îîüé∞–û—Ç—ã–≥—Ä—ã—à: <code>{"–≤–∫–ª—é—á–µ–Ω" if promo_ubt == "enable" else "–≤—ã–∫–ª—é—á–µ–Ω"}</code></b>

            ''' 
            await call.message.edit_text(
                text=text,
                reply_markup=btns,
                parse_mode='HTML'
            )
            
        elif "link_wallet_" in str(call.data):
            
            wallet_name = str(call.data).split("_")[2]
            print(wallet_name)
            if wallet_name == 'USDT':
                await call.message.edit_text(
                    text=f"<b>üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ USDT TRC20 –∫–æ—à–µ–ª—å–∫–∞</b>",
                    parse_mode='HTML'
                )
            else:
                await call.message.edit_text(
                    text=f"<b>üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ BTC –∫–æ—à–µ–ª—å–∫–∞</b>", 
                    parse_mode='HTML'
                )
            
            await state.set_state(States.link_wallet)
            await state.update_data(wallet_name=wallet_name)

        elif call.data == "payout":
            payout_btns = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="BTC", callback_data="payout_BTC"), types.InlineKeyboardButton(text="USDT", callback_data="payout_USDT")],
                [types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_main")]
            ])
            await call.message.edit_text(
                text="üí∏ –ù–∞ –∫–∞–∫–æ–π –∫–æ—à–µ–ª–µ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É?",
                reply_markup=payout_btns
            )

        elif str(call.data).startswith("all_payout_"):
            await state.clear()
            balance = DB.get(user_id=call.from_user.id, data="balance", table=DB.users_table)
            await utils.update_user_balance(
                user_id=call.from_user.id,
                amount_of_payout=balance,
                msg2edit=call.message,
                wallet_name=str(call.data).split("_")[2]
            )

        elif str(call.data).startswith("payout_request_accept?"):
            user_id = str(call.data).split("?")[1]
            await call.message.edit_reply_markup(
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–∞!", callback_data="pass")]])
                )
            await bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í—ã–ø–ª–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—à–µ–ª–µ–∫"
            )

        elif str(call.data).startswith("payout_request_decline?"):
            user_id = str(call.data).split("?")[1]
            await call.message.edit_reply_markup(
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞!", callback_data="pass")]])
                )
            await bot.send_message(
                chat_id=user_id,
                text="‚ùå –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –±–∞–ª–∞–Ω—Å"
            )
            msg_text_list = str(call.message.text).splitlines()
            amount_of_payout = msg_text_list[2].split(":")[1].replace("$", "").replace(" ", "")
            user_id = msg_text_list[1].split("/")[1].replace(" ", "")
            balance = DB.get(user_id=user_id, data="balance", table=DB.users_table)
            DB.update(user_id=user_id, column="balance", new_data=float(balance) + float(amount_of_payout), table=DB.users_table)


        elif str(call.data).startswith("payout_"):
            wallet_data = DB.get(user_id=call.from_user.id, data=f"{str(call.data).lower().split('_')[1]}_wallet", table=DB.users_table)
            if wallet_data is None:
                await call.message.edit_text(
                    text=f"‚ùå –£–∫–∞–∂–∏—Ç–µ {str(call.data).split('_')[1]} –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"
                )
                return
            print(wallet_data)
            text = f'''
<b>üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:</b>

<blockquote><b>üí∞–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {DB.get(user_id=call.from_user.id, data="balance", table=DB.users_table)}$
üëõ–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞: {wallet_data}</b></blockquote>
                '''
            payout_btns = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ", callback_data=f"all_payout_{str(call.data).split('_')[1]}"),
                    types.InlineKeyboardButton(text="‚ùóÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="cancel_payout")
                ],
                [
                    types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_main")
                ],
            ])

            await call.message.edit_text(
                text=text,
                reply_markup=payout_btns,
                parse_mode='HTML'
            )
            await state.set_state(States.payout_amount)
            await state.update_data(msg2edit=call.message)
            await state.update_data(wallet=str(call.data).split("_")[1])
        
        elif call.data == "cancel_payout":
            start_btns = types.ReplyKeyboardMarkup(keyboard=[
                    [
                        types.KeyboardButton(text="‚òÉÔ∏è –ü—Ä–æ—Ñ–∏–ª—å"), types.KeyboardButton(text="üåè –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã")
                    ],
                    [
                        types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), types.KeyboardButton(text="üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    ]
            ], resize_keyboard=True)
            await state.clear()
            await cmd_handler.start(
                msg=call.message,                       
                state=state, 
                user_id=call.from_user.id, 
                edit_msg=True
            )

        elif str(call.data).startswith("promo_ubt_"):
            print('DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD')
            promo_ubt_state = str(call.data).split("_")[2].split("?")[0]
            creator_user_id = str(call.data).split("?")[1].split("_")[0]
            name = str(str(call.data).split("?")[1].split("_")[1]).lower()
            amount = str(call.data).split("?")[1].split("_")[2]
            DB.insert_promo(user_id=creator_user_id, name=name, ubt=promo_ubt_state, amount=amount)
            api_result = await api.create_promo(
                data={
                    'name': name,
                    'amount': amount,
                    'shouldWager': True if promo_ubt_state == "enable" else False,
                }
            )
            text=f'''
<b>üíé–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ–º–æ–∫–æ–¥–µ</b>
<blockquote><b>üéü–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:</b> {name}
<b>üí∏–°—É–º–º–∞ –±–æ–Ω—É—Å–∞ –º–∞–º–æ–Ω—Ç—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {amount}$
<b>üé∞–û—Ç—ã–≥—Ä—ã—à –ø—Ä–æ–º–æ–∫–æ–¥–∞:</b> {'–í–∫–ª—é—á–µ–Ω.' if promo_ubt_state == "enable" else '–í—ã–∫–ª—é—á–µ–Ω.'}
</blockquote>


'''
            if api_result["success"] is True:
                await call.message.edit_text(
                    text=text,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [
                            types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data=f"promo_setts")
                        ]
                    ]),
                    parse_mode='HTML'
                )

        elif call.data == "create_promo":
            await call.message.edit_text(
                text="<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –º–∞–º–æ–Ω—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—É–∫–∞–∑—ã–≤–∞—Ç—å –≤ $):</b>",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="promo_setts")
                    ]
                ]),
                parse_mode='HTML'
            )
            await state.set_state(States.create_promo_amount)

        elif call.data == "stats_promo":
            count_of_promocodes = DB.get_all_user_id(
                user_id=call.from_user.id,
                data="name",
                table=DB.promocodes
            )
            if len(count_of_promocodes) == 0:
                await call.answer(
                    text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
                    show_alert=True
                )
            else:
                btns = await utils.create_promo_btns(user_id=call.from_user.id, btns_type="stats")
                text = '''
üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    '''
                await call.message.edit_text(
                    text=text,
                    reply_markup=btns
                )

        elif call.data == "delete_promo":
            count_of_promocodes = DB.get_all_user_id(
                user_id=call.from_user.id,
                data="name",
                table=DB.promocodes
            )
            if len(count_of_promocodes) == 0:
                await call.answer(
                    text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
                    show_alert=True
                )
            else:
                btns = await utils.create_promo_btns(user_id=call.from_user.id, btns_type="delete")
                text = 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å'
                await call.message.edit_text(
                    text=text,
                    reply_markup=btns
                )
            
        elif call.data == "edit_promo":
            count_of_promocodes = DB.get_all_user_id(
                user_id=call.from_user.id,
                data="name",
                table=DB.promocodes
            )
            if len(count_of_promocodes) == 0:
                await call.answer(
                    text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
                    show_alert=True
                )
            else:
                btns = await utils.create_promo_btns(user_id=call.from_user.id, btns_type="edit")
                text = 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'        
                await call.message.edit_text(
                    text=text,
                    reply_markup=btns
                )

        elif str(call.data).startswith("promocode_"):
            promo_name = str(call.data).split("_")[1].split("?")[0]
            btn_type = str(call.data).split("?")[1]
            if btn_type == "stats":
                promo_view_text = await utils.promo_view_stats(promo_name)
                await call.message.edit_text(
                    text=promo_view_text,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[]]),
                    parse_mode='HTML'
                )
            elif btn_type == "delete":
                text = f'‚ÅâÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ {promo_name}?'
                btns = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"promocodeDelete_decline?{promo_name}"), types.InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"promocodeDelete_accept?{promo_name}")]
                ])
                await call.message.edit_text(
                    text=text,
                    reply_markup=btns
                )
            elif btn_type == "edit":
                btns = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="–°—É–º–º–∞", callback_data=f"promocodeEdit_amount?{promo_name}"), types.InlineKeyboardButton(text="–û—Ç—ã–≥—Ä—ã—à", callback_data=f"promocodeEdit_ubt?{promo_name}")]
                ])
                cursor.execute(f"SELECT amount, ubt FROM promocodes WHERE name = ?", (promo_name, ))
                result = cursor.fetchall()[0]
                promo_amount = result[0]
                promo_ubt = result[1]
                text = f'''
‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
üëÄ –ü—Ä–æ–º–æ–∫–æ–¥: {promo_name}
üíµ –°—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promo_amount}
üé∞ –û—Ç—ã–≥—Ä—ã—à –ø—Ä–æ–º–æ–∫–æ–¥–∞: {"–≤–∫–ª—é—á–µ–Ω" if promo_ubt == "enable" else "–≤—ã–∫–ª—é—á–µ–Ω"}
                ''' 
                await call.message.edit_text(
                    text=text,
                    reply_markup=btns
                )

        elif str(call.data).startswith("promocodeEdit_"):
            edit_type = str(call.data).split("_")[1].split("?")[0]
            promo_name = str(call.data).split("?")[1]
            if edit_type == "amount":
                text = f"üíµ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_name}:"
                await call.message.edit_text(
                    text=text,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[]])
                )
                await state.set_state(States.edit_promo_amount)
                await state.update_data(promo_name=promo_name)
            elif edit_type == "ubt":
                cursor.execute('SELECT ubt FROM promocodes WHERE name = ?', (promo_name, ))
                promo_ubt = cursor.fetchone()[0]
                text = f"üé∞ –û—Ç—ã–≥—Ä—ã—à –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_name}: {'–≤–∫–ª—é—á–µ–Ω' if promo_ubt == 'enable' else '–æ—Ç–∫–ª—é—á–µ–Ω'}"
                promo_edit_btns = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚úÖ –û—Ç–∫–ª—é—á–µ–Ω", callback_data=f"promocodeEdit?ubt_disable_{promo_name}"), types.InlineKeyboardButton(text="‚ùå –í–∫–ª—é—á–µ–Ω", callback_data=f"promocodeEdit?ubt_enable_{promo_name}")]
                ])
                await call.message.edit_text(
                    text=text,
                    reply_markup=promo_edit_btns
                )
        
        elif str(call.data).startswith("promocodeEdit?ubt_"):
            edit_state = str(call.data).split("_")[1]
            promo_name = str(call.data).split("_")[2]
            promo = await api.get_promo(promo_name)
            promo_amount = promo["data"]["amount"]

            try:
                cursor.execute("UPDATE promocodes SET ubt = ? WHERE name = ?", (edit_state, promo_name))
                conn.commit()
                api_result = await api.edit_promo({
                    'name': promo_name,
                    'amount': promo_amount,
                    'shouldWager': True if edit_state == "enable" else False
                })
                if api_result["success"] is True:
                    await call.message.edit_text(
                        text="‚úÖÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[]])
                    )
                else:
                    raise Exception
            except Exception:
                await call.message.edit_text(
                    text="‚ùå –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[]])
                )

        elif str(call.data).startswith("promocodeDelete_"):
            delete_state = str(call.data).split("_")[1].split("?")[0]
            promo_name = str(call.data).split("?")[1]
            if delete_state == "accept":
                try:
                    cursor.execute(f"DELETE from promocodes where name = ?", (promo_name,))
                    conn.commit()
                    api_result = await api.delete_promo(promo_name)
                    if api_result["success"] is True:
                        await call.message.edit_text(
                            text="<b>‚úÖÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>",
                            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data=f"promo_setts")
                                ]
                            ]),
                            parse_mode='HTML'
                        )
                    else:
                        raise Exception
                except Exception:
                    await call.message.edit_text(
                        text="<b>‚ùå –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                            [
                                types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data=f"promo_setts")
                            ]
                        ]),
                        parse_mode='HTML'
                    )


        elif str(call.data).startswith("promo_page_"):
            page = int(str(call.data).split("_")[2].split("?")[0])
            btns_type = str(call.data).split("?")[1]
            btns = await utils.create_promo_btns(
                user_id=call.from_user.id, 
                btns_type=btns_type, 
                page=page
            )
            if btns is not False:
                await call.message.edit_reply_markup(
                    reply_markup=btns
                )
            else:
                await call.answer()
                return
        
        elif str(call.data).startswith("workers_page_"):
            page = int(str(call.data).split("_")[2].split("?")[0])
            workers = DB.get_all(data="user_id", table=DB.users_table)
            btns = await utils.create_workers_btns(data_list=workers, page=page)
            if btns is not False:
                await call.message.edit_reply_markup(
                    reply_markup=btns
                )
            else:
                await call.answer()
                return

        elif str(call.data).startswith("worker_"):
            worker_id = str(call.data).split("_")[1].split("?")[0]
            text, worker_btns = await utils.create_worker_profile(worker_id)
            await call.message.edit_text(
                text=text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=worker_btns)
            )

        elif str(call.data).startswith("ban/unban_"):
            worker_id = str(call.data).split("_")[1]
            ban_state = DB.get(user_id=worker_id, data="_is_banned", table=DB.users_table)
            if ban_state:
                ban_state = f'{"True" if ban_state == "False" else "False"}'
                result = DB.update(user_id=worker_id, column="_is_banned", new_data=ban_state, table=DB.users_table)
                if result:
                    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ " + ("–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if ban_state == 'True' else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"))
                else:
                    print(2)

        elif str(call.data).startswith("changeBalance_"):
            worker_id = str(call.data).split("_")[1]
            worker_name = DB.get(user_id=worker_id, data="tg_firstname", table=DB.users_table)
            worker_username = DB.get(user_id=worker_id, data="tg_username", table=DB.users_table)
            worker_balance = DB.get(user_id=worker_id, data="balance", table=DB.users_table)
            await state.set_state(States.user_input_new_balance)
            await state.update_data(worker_id=worker_id)
            text = f"""
üë• –í–æ—Ä–∫–µ—Ä {worker_id} ({worker_name}/@{worker_username})

–ë–∞–ª–∞–Ω—Å: {worker_balance}
–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:"""
            await call.message.edit_text(
                text=text,
            )
        
        elif str(call.data).startswith("show_wallets_"):
            worker_id = str(call.data).split("_")[2]
            worker_name = DB.get(user_id=worker_id, data="tg_firstname", table=DB.users_table)
            worker_username = DB.get(user_id=worker_id, data="tg_username", table=DB.users_table)
            worker_btc_wallet = DB.get(user_id=worker_id, data="btc_wallet", table=DB.users_table)
            worker_usdt_wallet = DB.get(user_id=worker_id, data="usdt_wallet", table=DB.users_table)
            text = f'''
üë• –í–æ—Ä–∫–µ—Ä {worker_id} ({worker_name}/@{worker_username}) 
üëõ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:
‚îî BTC: {worker_btc_wallet}
‚îî USDT TRC-20: {worker_usdt_wallet}
                '''
            btns = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data=f"worker_{worker_id}")]
            ])
            await call.message.edit_text(
                text=text,
                reply_markup=btns
            )

        elif str(call.data).startswith("show_percentage_"):
            worker_id = str(call.data).split("_")[2]
            worker_name = DB.get(user_id=worker_id, data="tg_firstname", table=DB.users_table)
            worker_username = DB.get(user_id=worker_id, data="tg_username", table=DB.users_table)
            worker_perc = DB.get(user_id=worker_id, data="percentage", table=DB.users_table)
            text = f'''
üë• –í–æ—Ä–∫–µ—Ä {worker_id} ({worker_name}/@{worker_username}) 
ü§ù –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç - {worker_perc}%
‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞:
                '''
            btns = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data=f"worker_{worker_id}")]])
            await call.message.edit_text(
                text=text,
                reply_markup=btns
            )
            await state.set_state(States.edit_worker_perc)
            await state.update_data(worker_id=worker_id)
        
            
        elif call.data == "admin_info":
            await state.clear()
            await call.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –∫–Ω–æ–ø–∫–µ ‚Äú–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚Äù:", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_admin")]]))
            await state.set_state(States.edit_info)

        elif call.data == "admin_url":
            await state.clear()
            await call.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_admin")]]))
            await state.set_state(States.edit_url)

        elif call.data == "admin_workers":
            await state.clear()
            workers = DB.get_all(data="user_id", table=DB.users_table)
            workers_btns = await utils.create_workers_btns(workers)
            await call.message.edit_text(
                text="üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /user + —Ç–µ–≥/–∞–π–¥–∏",
                reply_markup=workers_btns
            )

        elif call.data == "admin_topWorkers":
            text = utils.create_top_list()
            await call.message.edit_text(
                text=text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_admin")]])
            )

        elif call.data == "admin_stats":
            data = await api.get_profile_stats()
            profile_data = data["data"]
            all_time_balance = profile_data["depositsAll"]
            all_users = profile_data["users"]
            all_time_promo_act = profile_data["promoActivations"]
            verif_users = profile_data["verified"]
            multi_deposits = profile_data["multiDeps"]
            conversion = profile_data["conversion"]
            text = f'''
‚åõÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è —Å–æ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤:

üí∞ –î–æ—Ö–æ–¥: {all_time_balance}$
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_users}
üéü –ê–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {all_time_promo_act}  
üõÇ –ü—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {verif_users}
üí≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {multi_deposits}
üí∏ –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ä–µ–≥./–¥–µ–ø–æ–≤: {round(conversion, 3)}$
                '''
            await call.message.edit_text(
                text=text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_admin")]])
            )

        elif call.data == "admin_msg":
            text = '''
üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:
                '''
            btns = [
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_admin")]
            ]
            await call.message.edit_text(
                text=text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns)
            )
            await state.set_state(States.admin_ad)
            
        
        elif str(call.data).startswith("adminMsg_"):
            msg_state = str(call.data).split("_")[1]
            if msg_state == "accept":
                start_timestamp = time.time()
                await call.message.edit_text(
                    text="‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[]])
                )
                text = call.message.text
                users = DB.get_all("user_id", DB.users_table)
                tasks = []
                async def send_msg_to_user(user_id):
                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text=text,
                            entities=call.message.entities
                        )
                        return True
                    except Exception:
                        return False
                    
                tasks.extend([send_msg_to_user(user_id) for user_id in users])
                results = await asyncio.gather(*tasks)    
                success = results.count(True)
                errors = results.count(False)
                admin_text = f"""
‚úÖÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}
–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {errors}
–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {datetime.fromtimestamp(time.time() - start_timestamp).strftime("%M –º–∏–Ω %S —Å–µ–∫")}
                """
                await call.message.answer(
                    text=admin_text
                )
            else:
                await call.message.edit_text(
                    text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[]])
                )
                return
        
        elif call.data == "admin_settings":
            await call.message.edit_text(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="ü§ù –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–ø–ª–∞—Ç", callback_data="admin_settings_percentage")], 
                                                                        [types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_admin")]
                                                                        ])
            )

        elif call.data == "admin_settings_percentage":
            btns = [
                [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —É –≤—Å–µ—Ö", callback_data="admin_change_perc?all")],
                [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —É –≤—Å–µ—Ö, –∫—Ä–æ–º–µ —Ç–µ—Ö, –∫–æ–º—É –º–µ–Ω—è–ª–∏ –≤—Ä—É—á–Ω—É—é", callback_data="admin_change_perc?manual")],
                [types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="admin_settings")]
            ]
            await call.message.edit_text(
                text="ü§ù –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–ø–ª–∞—Ç",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns)
            )
        
        elif str(call.data).startswith("admin_change_perc?"):
            perc_state = str(call.data).split("?")[1]
            if perc_state == "all":
                text = '''
üë• –ò–∑–º–µ–Ω–∏—Ç—å —É –≤—Å–µ—Ö

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç—Å—è —É –≤—Å–µ—Ö —Ç—Ä–∞—Ñ—Ñ–µ—Ä–æ–≤ (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 50):
                        '''
                await state.set_state(States.admin_perc_change_all)
                await call.message.edit_text(
                    text=text,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="admin_settings_percentage")]])
                )
            elif perc_state == "manual":
                text = '''
üë• –ò–∑–º–µ–Ω–∏—Ç—å —É –≤—Å–µ—Ö, –∫—Ä–æ–º–µ —Ç–µ—Ö, –∫–æ–º—É –º–µ–Ω—è–ª–∏ –≤—Ä—É—á–Ω—É—é

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç—Å—è —É –≤—Å–µ—Ö —Ç—Ä–∞—Ñ—Ñ–µ—Ä–æ–≤, –∫—Ä–æ–º–µ —Ç–µ—Ö, –∫–æ–º—É –º–µ–Ω—è–ª–∏ –≤—Ä—É—á–Ω—É—é (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 50):
                    '''
                await state.set_state(States.admin_perc_change_manual)
                await call.message.edit_text(
                    text=text,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="admin_settings_percentage")]])
                )

        elif call.data == "admin_deposits":
            cursor.execute(f"SELECT id, amountUSD FROM {DB.deposits}")
            fetch = cursor.fetchall()
            deposits = []
            ids = []
            for item in fetch:
                deposits.append(item[1])
                ids.append(item[0])
            else:
                if deposits:
                    btns = await utils.create_deposits_btns(data_list=deposits, ids=ids)
                    text = '''
üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                        '''
                    await call.message.edit_text(
                        text=text,
                        reply_markup=btns
                    )
                else:
                    await call.message.edit_text(
                        text="‚ùå –î–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùÑÔ∏è", callback_data="back_admin")]])
                    )
                    

        elif str(call.data).startswith("deposits_page_"):
            page = int(str(call.data).split("_")[2].split("?")[0])
            cursor.execute(f"SELECT id, amountUSD FROM {DB.deposits}")
            fetch = cursor.fetchall()
            deposits = []
            ids = []
            for item in fetch:
                deposits.append(item[1])
                ids.append(item[0])
            btns = await utils.create_deposits_btns(data_list=deposits, page=page, ids=ids)
            if btns is not False:
                await call.message.edit_reply_markup(
                    reply_markup=btns
                )
            else:
                await call.answer()
                return        

        elif str(call.data).startswith("deposit_"):
            deposit_id = str(call.data).split("?")[1]
            cursor.execute(f"SELECT * FROM {DB.deposits} WHERE id = ?", (deposit_id, ))
            deposit_data = cursor.fetchall()[0]
            worker_name = DB.get(user_id=deposit_data[1], data="tg_firstname", table=DB.users_table)
            worker_username = DB.get(user_id=deposit_data[1], data="tg_username", table=DB.users_table)
            text = f'''
üëÄ –î–µ–ø–æ–∑–∏—Ç {deposit_data[3]} $
üë®‚Äç –í–æ—Ä–∫–µ—Ä: {worker_name} (@{worker_username}) / {deposit_data[1]} 
ü¶£ –õ–æ–≥–∏–Ω –º–∞–º–æ–Ω—Ç–∞: {deposit_data[4]}
üíé –ú–æ–Ω–µ—Ç–∞: {deposit_data[5]}
üîó –î–æ–º–µ–Ω: {deposit_data[6]}
üóì –î–∞—Ç–∞: {deposit_data[7]} 
‚õìÔ∏è –•–µ—à: {deposit_data[8]}
                '''
            await call.message.edit_text(
                text=text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[]])
            )

        elif str(call.data).startswith("back_"):
            menu = str(call.data).split("_")[1]
            await state.clear()
            if menu == "main": await cmd_handler.start(
                msg=call.message,                       
                state=state, 
                user_id=call.from_user.id, 
                edit_msg=True
            )
            
            elif menu == "admin": await cmd_handler.admin(
                msg=call.message,
                state=state,
                user_id=call.from_user.id,
                edit_msg=True
            )
        
        elif call.data == "admin":
            await state.clear()
            await cmd_handler.admin(msg=call.message, state=state, user_id=call.from_user.id)


        elif call.data == "pass":
            await call.answer()
            return

        else:
            await call.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ...")
    
    else:
        if call.data == 'send_req_zz':
            await call.message.edit_text(
                text="‚úçüèª –û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:"
            )
            await state.set_state(States.start_input)
        else:
            await call.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)